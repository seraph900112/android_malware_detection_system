package com.example.malware_detection.SVM;

import android.content.Context;
import android.os.Environment;
import android.util.Log;

import com.example.malware_detection.Util.FileUtil;

import org.tensorflow.lite.Interpreter;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.MappedByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;

public class SVM_Model {
    String[] featureVector = new String[1284];
    HashMap<String, Integer> featureMap = new HashMap<>();
    Context context;
    int featureDim = 1284;
    File downloadDir;

    Interpreter.Options options;
    Interpreter tfliteInterpreter;

    public SVM_Model(Context context) {
        //load feature
        this.context = context;
        this.load_feature_vector();
        this.downloadDir = context.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);
    }

    void load_feature_vector() {
        try {
            InputStream inputStream = context.getAssets().open("record_all_pure.txt");
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));
            String line;
            int count = 0;
            while ((line = reader.readLine()) != null) {
                featureVector[count] = line;
                featureMap.put(line, count);
                count++;
            }
        } catch (IOException e) {
            Log.e("error", e.getLocalizedMessage());
        }
    }

    public float[][] load_feature(String fileName) {
        String[] apkPermission = PermissionExtractor.extractPermissions(this.context,  fileName);
        if (apkPermission == null || featureMap == null) {
            return null;
        }
        float[][] res = new float[1][this.featureDim];
        Arrays.fill(res[0], 0);
        for (String s : apkPermission) {
            if (featureMap.containsKey(s)) {
                res[0][featureMap.get(s)] = 1;
            }
        }
        return res;
    }

    public void load_svm() {
        // 加载 TensorFlow Lite 模型文件
        MappedByteBuffer tfliteModel;
        try {
            tfliteModel = FileUtil.loadMappedFile(context, "model.tflite");
        } catch (IOException e) {
            Log.e("0", "无法加载 TensorFlow Lite 模型文件", e);
            return;
        }

        // 创建 TensorFlow Lite 解释器实例
        this.options = new Interpreter.Options();
        this.tfliteInterpreter = new Interpreter(tfliteModel, options);
    }

    public float run(float[][] input) {
        float[][] output = new float[1][1];
        tfliteInterpreter.run(input, output);
        return output[0][0];
    }

}
